# BentoSdk Demo

```elixir
Mix.install([
  {:bento_sdk, path: "../"},
  {:kino, "~> 0.11.0"}
])
```

## Introduction

Welcome to the BentoSdk demo! This Livebook document demonstrates how to use the BentoSdk package, which provides a client interface for the [Bento marketing platform](https://bentonow.com).

In this document, you'll learn how to:

1. Configure the SDK with your Bento credentials
2. Find subscribers in your Bento account
3. Create new subscribers
4. Find or create subscribers (upsert)

## Configuration

We'll use Livebook's secrets feature to securely store and access your Bento credentials:

```elixir
# Configure BentoSdk with the LiveBook secrets
BentoSdk.configure(
  site_uuid: System.fetch_env!("LB_BENTO_SITE_UUID"),
  username: System.fetch_env!("LB_BENTO_USERNAME"),
  password: System.fetch_env!("LB_BENTO_PASSWORD")
)
```

## Finding a Subscriber

Let's try to find a subscriber in your Bento account:

```elixir
# Example of finding a subscriber
email = "example@example.com"

case BentoSdk.find_subscriber(email) do
  {:ok, nil} ->
    "No subscriber found with email: #{email}"
  
  {:ok, subscriber} ->
    subscriber
  
  {:error, reason} ->
    "Error finding subscriber: #{reason}"
end
```

## Creating a Subscriber

Now, let's create a new subscriber:

```elixir
# Example of creating a subscriber
email = "new_user@example.com"

case BentoSdk.create_subscriber(email) do
  {:ok, subscriber} ->
    subscriber
  
  {:error, reason} ->
    "Error creating subscriber: #{reason}"
end
```

## Finding or Creating a Subscriber (Upsert)

Let's try the find_or_create_subscriber function, which will find a subscriber if they exist or create them if they don't:

```elixir
# Example of finding or creating a subscriber
email = "user@example.com"

case BentoSdk.find_or_create_subscriber(email) do
  {:ok, subscriber} ->
    subscriber
  
  {:error, reason} ->
    "Error finding or creating subscriber: #{reason}"
end
```

## Example: Complete Subscriber Management Workflow

Here's a more comprehensive example showing a complete workflow for subscriber management:

```elixir
# Example: Complete subscriber management workflow
email = "workflow_example@example.com"

# 1. First, check if the subscriber exists
find_result = BentoSdk.find_subscriber(email)

subscriber = case find_result do
  {:ok, nil} ->
    # 2a. Subscriber doesn't exist, create a new one
    IO.puts("Subscriber not found. Creating new subscriber...")
    
    case BentoSdk.create_subscriber(email) do
      {:ok, new_subscriber} -> 
        IO.puts("Subscriber created successfully!")
        new_subscriber
      {:error, reason} -> 
        IO.puts("Error creating subscriber: #{reason}")
        nil
    end
    
  {:ok, existing_subscriber} ->
    # 2b. Subscriber exists, update their information
    IO.puts("Subscriber found. Updating information...")
    
    # Add tags
    BentoSdk.add_tags(email, ["returning_user"])
    
    # Update custom fields
    custom_fields = %{
      "last_login" => DateTime.utc_now() |> DateTime.to_string(),
      "login_count" => "5"
    }
    
    case BentoSdk.update_fields(email, custom_fields) do
      {:ok, updated_subscriber} -> 
        IO.puts("Subscriber updated successfully!")
        updated_subscriber
      {:error, reason} -> 
        IO.puts("Error updating subscriber: #{reason}")
        existing_subscriber
    end
    
  {:error, reason} ->
    IO.puts("Error finding subscriber: #{reason}")
    nil
end

# 3. If we have a subscriber, track an event
if subscriber do
  IO.puts("Tracking login event...")
  
  event_data = %{
    "timestamp" => DateTime.utc_now() |> DateTime.to_string(),
    "ip_address" => "192.168.1.1",
    "user_agent" => "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)"
  }
  
  case BentoSdk.track_event(email, "user_login", event_data) do
    {:ok, event_result} -> 
      IO.puts("Event tracked successfully!")
      event_result
    {:error, reason} -> 
      IO.puts("Error tracking event: #{reason}")
  end
end

# Return the subscriber
subscriber
```

## Using Mocks for Testing

In your application, you might want to test your code without making actual API calls to Bento. The BentoSdk package is designed to be easily testable using mocks.

Here's an example of how you could set up mocks in your tests:

```elixir
# This is example code for your test files, not meant to be run in this Livebook

# In your test_helper.exs
Mox.defmock(YourApp.MockBentoClient, for: BentoSdk.ClientBehaviour)

# In your test setup
setup do
  BentoSdk.configure(client: YourApp.MockBentoClient)
  :ok
end

# In your test
test "finds a subscriber" do
  email = "test@example.com"
  subscriber_data = %{"email" => email, "first_name" => "Test"}
  
  YourApp.MockBentoClient
  |> Mox.expect(:find_subscriber, fn ^email -> {:ok, subscriber_data} end)
  
  assert {:ok, subscriber} = BentoSdk.find_subscriber(email)
  assert subscriber["email"] == email
end

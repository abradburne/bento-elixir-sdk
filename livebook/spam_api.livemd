# BentoSdk Spam API

```elixir
Mix.install([
  {:bento_sdk, path: "../"},
  {:kino, "~> 0.11.0"}
])
```

## Introduction

This notebook demonstrates how to use the BentoSdk to validate email addresses for spam risk in the Bento marketing platform. The Spam API allows you to:

- Check if an email is valid
- Check if an email is risky
- Get detailed reasons for email risk assessment

Email validation is crucial for maintaining a clean subscriber list and ensuring good deliverability.

## Configuration

We'll use Livebook's secrets feature to securely store and access your Bento credentials:

```elixir
# Configure BentoSdk with the secrets
BentoSdk.configure(
  site_uuid: System.fetch_env!("LB_BENTO_SITE_UUID"),
  username: System.fetch_env!("LB_BENTO_USERNAME"),
  password: System.fetch_env!("LB_BENTO_PASSWORD")
)
```

## Checking Email Validity

Let's check if an email is valid:

```elixir
# Example of checking if an email is valid
email = "test@example.com"

case BentoSdk.email_valid?(email) do
  {:ok, is_valid} ->
    "Email #{email} is #{if is_valid, do: "valid", else: "invalid"}"
  {:error, reason} ->
    "Error: #{reason}"
end
```

## Checking if an Email is Disposable

Let's check if an email is from a disposable email service:

```elixir
# Example of checking if an email is disposable
email = "test@example.com"

case BentoSdk.email_disposable?(email) do
  {:ok, is_disposable} ->
    "Email #{email} is #{if is_disposable, do: "disposable", else: "not disposable"}"
  {:error, reason} ->
    "Error: #{reason}"
end
```

## Checking if an Email is a Spam Trap

Let's check if an email is a spam trap:

```elixir
# Example of checking if an email is a spam trap
email = "test@example.com"

case BentoSdk.email_spam_trap?(email) do
  {:ok, is_spam_trap} ->
    "Email #{email} is #{if is_spam_trap, do: "a spam trap", else: "not a spam trap"}"
  {:error, reason} ->
    "Error: #{reason}"
end
```

## Checking if an Email is a Role Account

Let's check if an email is a role account (e.g., info@, support@, etc.):

```elixir
# Example of checking if an email is a role account
email = "info@example.com"

case BentoSdk.email_role_account?(email) do
  {:ok, is_role_account} ->
    "Email #{email} is #{if is_role_account, do: "a role account", else: "not a role account"}"
  {:error, reason} ->
    "Error: #{reason}"
end
```

## Example: Email Validation for a Signup Form

Here's an example of how you might use the spam API to validate an email address before allowing a user to sign up:

```elixir
# Example of validating an email for a signup form
email = "test@example.com"

# Check multiple properties of the email
{valid_result, disposable_result, spam_trap_result, role_account_result} = {
  BentoSdk.email_valid?(email),
  BentoSdk.email_disposable?(email),
  BentoSdk.email_spam_trap?(email),
  BentoSdk.email_role_account?(email)
}

# Process the results
is_valid = case valid_result do
  {:ok, result} -> result
  _ -> false
end

is_disposable = case disposable_result do
  {:ok, result} -> result
  _ -> true  # Assume disposable if error
end

is_spam_trap = case spam_trap_result do
  {:ok, result} -> result
  _ -> true  # Assume spam trap if error
end

is_role_account = case role_account_result do
  {:ok, result} -> result
  _ -> false  # Don't assume role account if error
end

# Determine if the email is acceptable for signup
is_acceptable = is_valid && !is_disposable && !is_spam_trap

# Generate a response
cond do
  !is_valid ->
    %{
      status: "error",
      message: "Please enter a valid email address."
    }
  is_disposable ->
    %{
      status: "error",
      message: "Please use a non-disposable email address."
    }
  is_spam_trap ->
    %{
      status: "error",
      message: "This email address has been identified as a spam trap."
    }
  is_role_account ->
    %{
      status: "warning",
      message: "You're using a role account email. We recommend using a personal email for better deliverability.",
      can_proceed: true
    }
  true ->
    %{
      status: "success",
      message: "Email validation passed."
    }
end
```

## Example: Batch Email Validation

Here's an example of how you might validate a batch of email addresses:

```elixir
# Example of batch email validation
emails = ["test1@example.com", "test2@example.com", "info@example.com"]

# Process each email
results = Enum.map(emails, fn email ->
  valid_result = case BentoSdk.email_valid?(email) do
    {:ok, is_valid} -> is_valid
    {:error, _} -> nil
  end
  
  disposable_result = case BentoSdk.email_disposable?(email) do
    {:ok, is_disposable} -> is_disposable
    {:error, _} -> nil
  end
  
  spam_trap_result = case BentoSdk.email_spam_trap?(email) do
    {:ok, is_spam_trap} -> is_spam_trap
    {:error, _} -> nil
  end
  
  role_account_result = case BentoSdk.email_role_account?(email) do
    {:ok, is_role_account} -> is_role_account
    {:error, _} -> nil
  end
  
  %{
    email: email,
    valid: valid_result,
    disposable: disposable_result,
    spam_trap: spam_trap_result,
    role_account: role_account_result,
    acceptable: valid_result && !disposable_result && !spam_trap_result
  }
end)

# Summarize the results
%{
  total: length(emails),
  valid: Enum.count(results, & &1.valid),
  disposable: Enum.count(results, & &1.disposable),
  spam_traps: Enum.count(results, & &1.spam_trap),
  role_accounts: Enum.count(results, & &1.role_account),
  acceptable: Enum.count(results, & &1.acceptable),
  details: results
}
```

## Understanding Email Validation Results

Here's a guide to interpreting the results:

- **Valid Email**: The email address is properly formatted and the domain exists.
- **Invalid Email**: The email address is improperly formatted or the domain doesn't exist.
- **Risky Email**: The email address might be valid, but it has characteristics that suggest it could be a spam trap, disposable email, or otherwise problematic.

## Common Email Validation Scenarios

### Checking New Subscribers

When a new subscriber signs up, you should validate their email:

```elixir
# Example of validating a new subscriber's email
email = "test@example.com"

valid_result = case BentoSdk.email_valid?(email) do
  {:ok, is_valid} -> is_valid
  {:error, _} -> nil
end

risky_result = case BentoSdk.email_risky?(email) do
  {:ok, is_risky} -> is_risky
  {:error, _} -> nil
end

cond do
  valid_result == nil || risky_result == nil ->
    "Error validating email"
  valid_result && !risky_result ->
    "Email is valid and not risky - safe to add to your list"
  valid_result && risky_result ->
    "Email is valid but risky - consider additional verification"
  !valid_result ->
    "Email is invalid - do not add to your list"
end
```

### Cleaning Your Email List

You can use the Spam API to clean your email list:

```elixir
# Example of cleaning an email list
emails = ["test1@example.com", "test2@example.com", "info@example.com"]

results = Enum.map(emails, fn email ->
  valid_result = case BentoSdk.email_valid?(email) do
    {:ok, is_valid} -> is_valid
    {:error, _} -> nil
  end
  
  risky_result = case BentoSdk.email_risky?(email) do
    {:ok, is_risky} -> is_risky
    {:error, _} -> nil
  end
  
  status = cond do
    valid_result == nil || risky_result == nil -> "Error"
    valid_result && !risky_result -> "Keep"
    valid_result && risky_result -> "Review"
    !valid_result -> "Remove"
  end
  
  {email, status}
end)

# Group by status
Enum.group_by(results, fn {_email, status} -> status end, fn {email, _status} -> email end)
